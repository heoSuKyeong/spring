<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">


	<!-- 
	Spring AOP 
	
	주업무 객체 : MemoImpl
	보조업무 객체 : Logger
	
	MemoImpl + Logger 결합하는 것이 memo.xml의 업무
	*****스프링이 특정 객체(클래스)를 인지하려면 반드시 <bean>으로 선언해야 한다.
	
	
	
	-->
	
	<!-- 주업무 객체 -->
	<bean id="memo" class="com.test.spring.aop1.MemoImpl"></bean>
	
	<!-- 보조 업무 객체 -->
	<bean id="logger" class="com.test.spring.aop1.Logger"></bean>

	<!-- 주업무 객체와 보조업무 객체 결합을 AOP가 담당한다.-->
	<aop:config>
		
		<!-- 보조업무를 담당할 객체에 보조업무 역할을 지정한다. -->
		<!-- aspect : 보조업무 담당 객체 -->
		<aop:aspect id="loggerAspect" ref="logger">
	
			<!-- 
			PointCut 지정하기 : 주업무 객체 지정 및 메서드를 찾는다. 주업무 사이에서 보조업무가 실행하는 시점을 정한다.
			- MemoImpl.add 메서드
			- MemoImpl.read 메서드
			
			AspectJ 표현식을 사용하여 찾는다.
			AspectJ 표현식은 독립적인 표현식으로 Spring에서 가져다 사용하는 것이다.
			- execution() 지시자
			- within() 지시자
			
			execution()
			- execution([접근지정자] 반환형 [클래스].메서드(인자))
			- execution(public void com.test.spring.aop1.MemoImpl.add(String))
			
				와일드 카드 존재
				- * : 접근지정자, 반환형, 패키지, 클래스, 메서드에서 사용가능하다.
				- .. : 인자 리스트에만 사용가능하다.
			 -->
			 
			<!-- 메모 쓰기 -->
	 		<!-- <aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p1"/> -->
	 		
	 		<!-- 메모 읽기 -->
	 		<!-- <aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int))" id="p2"/> -->
	 		
	 		<!-- 메모 쓰기 + 읽기 (단, 표현식이 복잡해지기에 잘 사용하지 않는다)-->
	 		<aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int)) 
	 								|| execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p3"/>
	 		
	 		
	 		<!-- 
	 		보조업무 객체(Logger) + 포인트컷(MemoImpl.add)
	 		위빙(Weaving) : 결합을 위미한다.
	 		- 5종류 Advice 중 하나를 구현한다. 
	 		after: 주업무 실행 후 보조업무 실행한다.
	 		before : 보조업무 실행 후 주업무 실행한다.
	 		
	 		-->
	 		<!-- <aop:after method="log" pointcut-ref="p1"/> -->
	 		<!-- <aop:before method="log" pointcut-ref="p1"/> -->
	 		
	 		<aop:after method="log" pointcut-ref="p1"/>
	 		<aop:after method="log" pointcut-ref="p2"/>
	 		
	 		
	 	</aop:aspect>
	
	</aop:config>






</beans>
